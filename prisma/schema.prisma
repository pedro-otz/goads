datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------------------------------------
// --- Modelos de Autenticação (Base) ---
// ------------------------------------

enum UserRole {
  ADMIN
  USER
}

model User {
  id                      String                   @id @default(cuid())
  name                    String?
  email                   String?                  @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole                 @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                  @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?

  // --- Relacionamento com a propriedade do DV360 ---
  advertisers             Advertiser[] // Um usuário pode ter acesso a vários advertisers
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


// ------------------------------------
// ---       Modelos para DV360     ---
// ------------------------------------

// Representa a "propriedade" que o usuário cadastra. É o nível mais alto da hierarquia no DV360.
model Advertiser {
  id                  String       @id @default(cuid())
  dv360AdvertiserId   String       @unique // ID do Advertiser vindo da API do DV360
  displayName         String       // Nome do Advertiser

  userId              String       // Chave estrangeira para o usuário que cadastrou
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  campaigns           Campaign[]   // Um Advertiser tem várias Campanhas

  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

// Modelo para as Campanhas
model Campaign {
  id                  String       @id @default(cuid())
  dv360CampaignId     String       @unique // ID da Campanha vindo da API do DV360
  displayName         String

  advertiserId        String       // Chave estrangeira para o Advertiser
  advertiser          Advertiser   @relation(fields: [advertiserId], references: [id], onDelete: Cascade)

  insertionOrders     InsertionOrder[] // Uma Campanha tem várias Insertion Orders

  // --- Métricas da Campanha ---
  impressions         BigInt?      // Usar BigInt para números grandes
  clicks              BigInt?
  spend               Decimal?     // Usar Decimal para valores monetários
  conversions         Float?
  ctr                 Float?       // Click-Through Rate
  cpm                 Decimal?     // Custo por Mil Impressões
  metricsLastUpdated  DateTime?    // Data da última atualização das métricas

  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

// Modelo para as Insertion Orders (IOs)
model InsertionOrder {
  id                  String       @id @default(cuid())
  dv360IOId           String       @unique // ID da IO vindo da API do DV360
  displayName         String

  campaignId          String       // Chave estrangeira para a Campanha
  campaign            Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  lineItems           LineItem[]   // Uma IO tem vários Line Items

  // --- Métricas da Insertion Order ---
  impressions         BigInt?
  clicks              BigInt?
  spend               Decimal?
  conversions         Float?
  ctr                 Float?
  cpm                 Decimal?
  metricsLastUpdated  DateTime?

  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

// Modelo para os Line Items
model LineItem {
  id                  String          @id @default(cuid())
  dv360LineItemId     String          @unique // ID do Line Item vindo da API do DV360
  displayName         String

  insertionOrderId    String          // Chave estrangeira para a Insertion Order
  insertionOrder      InsertionOrder  @relation(fields: [insertionOrderId], references: [id], onDelete: Cascade)

  // --- Métricas do Line Item ---
  impressions         BigInt?
  clicks              BigInt?
  spend               Decimal?
  conversions         Float?
  ctr                 Float?
  cpm                 Decimal?
  metricsLastUpdated  DateTime?

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}